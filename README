What I did was break out AndroidProject from http://github.com/weihsiu/saisiyat/ into an sbt plugin.  This just meant copying it to src/main/scala in its own project and having its project definition extend PluginProject.  Use publish-local to make it available for use by projects on your machine.

I changed the tasks that forked the android binaries to use the new execTask in the sbt 0.5.2-p1 snapshot.  Also, I made the androidSdkPath abstract, added the android.jar from the android sdk to the classpath so it doesn't have to be included in lib/, and moved the ant, proguard, and antelese dependencies to dependency management so they don't have to be copied between classes (just do an 'update'). 

To use the plugin in a project, you just need to create project/plugins/Plugins.scala:


import sbt._
class Plugins(info: ProjectInfo) extends PluginDefinition(info) {
  val android = "android-plugin" % "android-plugin" % "0.1"
}


and make the project definition in project/build/SaisiyatProject (for example):


import sbt._
import java.io.File

class SaisiyatProject(info: ProjectInfo) extends AndroidProject(info) {
  def androidSdkPath = Path.fromFile(new File("/home/mark/code/java/android-sdk-linux_x86-1.5_r2"))
}

Alternatively, you can also use the script in contrib/create_project to set
everything up for you:

contrib/create_project --project MyAndroidProject --package com.foo.project --sdk <path to android sdk>

This will generate the directory / project structure as well as all needed files plus
skeleton tests, specs and activities.
